from .client import Client


class BinanceMarginTradingEndpoints:
    """
        Wrapper for Margin Trading Endpoints
    """

    def __init__(self, api_key=None, api_secret=None, requests_params=None, tld='com'):
        self.binance_call = Client(api_key, api_secret, requests_params, tld)

    def get_margin_account(self, **params):
        """
        Query margin account details

        :returns: API response
        """
        return self.binance_call.get_margin_account(**params)

    def get_margin_asset(self, **params):
        """
        Query margin asset

        :param asset: name of the asset

        :returns: API response
        """
        return self.binance_call.get_margin_asset(**params)

    def get_margin_symbol(self, **params):
        """
        Query margin symbol info

        :param symbol: name of the symbol pair

        :returns: API response
        """
        return self.binance_call.get_margin_symbol(**params)

    def get_margin_price_index(self, **params):
        """
        Query margin priceIndex

        :param symbol: name of the symbol pair

        :returns: API response
        """
        return self.binance_call.get_margin_price_index(**params)

    def transfer_margin_to_spot(self, **params):
        """
        Execute transfer between margin account and spot account.

        :param asset: name of the asset
        :param amount: amount to transfer
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.transfer_margin_to_spot(**params)

    def transfer_spot_to_margin(self, **params):
        """
        Execute transfer between spot account and margin account.

        :param asset: name of the asset
        :param amount: amount to transfer
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.transfer_spot_to_margin(**params)

    def create_margin_loan(self, **params):
        """
        Apply for a loan.

        :param asset: name of the asset
        :param amount: amount to transfer
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.create_margin_loan(**params)

    def repay_margin_loan(self, **params):
        """
        Repay loan for margin account.

        :param asset: name of the asset
        :param amount: amount to transfer
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.repay_margin_loan(**params)

    def create_margin_order(self, **params):
        """
        Post a new order for margin account.

        :param symbol: required
        :param side: required
        :param type: required
        :param quantity: required
        :param price: required
        :param stopPrice: Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
        :param timeInForce: required if limit order GTC,IOC,FOK
        :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
        :param icebergQty: Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
        :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to
                FULL, all other orders default to ACK.
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.create_margin_order(**params)

    def cancel_margin_order(self, **params):
        """
        Cancel an active order for margin account.
        Either orderId or origClientOrderId must be sent.

        :param symbol: required
        :param orderId:
        :param origClientOrderId:
        :param newClientOrderId: Used to uniquely identify this cancel. Automatically generated by default.
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.cancel_margin_order(**params)

    def get_margin_loan_details(self, **params):
        """
        Query loan record
        txId or startTime must be sent. txId takes precedence.

        :param asset: required
        :param txId: the tranId in of the created loan
        :param startTime:
        :param endTime: Used to uniquely identify this cancel. Automatically generated by default.
        :param current: Currently querying page. Start from 1. Default:1
        :param size: Default:10 Max:100
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_margin_loan_details(**params)

    def get_margin_repay_details(self, **params):
        """
        Query repay record
        txId or startTime must be sent. txId takes precedence.

        :param asset: required
        :param txId: the tranId in of the created loan
        :param startTime:
        :param endTime: Used to uniquely identify this cancel. Automatically generated by default.
        :param current: Currently querying page. Start from 1. Default:1
        :param size: Default:10 Max:100
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_margin_repay_details(**params)

    def get_margin_order(self, **params):
        """
        Query margin accounts order
        Either orderId or origClientOrderId must be sent.
        For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.

        :param symbol: required
        :param orderId:
        :param origClientOrderId:
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_margin_order(**params)

    def get_open_margin_orders(self, **params):
        """
        Query margin accounts open orders
        If the symbol is not sent, orders for all symbols will be returned in an array.
        When all symbols are returned, the number of requests counted against the rate limiter is equal to the number
        of symbols currently trading on the exchange.

        :param symbol: optional
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_open_margin_orders(**params)

    def get_all_margin_orders(self, **params):
        """
        Query all margin accounts orders

        If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
        For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.

        :param symbol: required
        :param orderId: optional
        :param startTime: optional
        :param endTime: optional
        :param limit: Default 500; max 1000
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_all_margin_orders(**params)

    def get_margin_trades(self, **params):
        """
        Query margin accounts trades
        If fromId is set, it will get orders >= that fromId. Otherwise most recent orders are returned.

        :param symbol: required
        :param fromId: optionalr
        :param startTime: optional
        :param endTime: optional
        :param limit: Default 500; max 1000
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_margin_trades(**params)

    def get_max_margin_loan(self, **params):
        """
        Query max borrow amount for an asset

        :param asset: required
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_max_margin_loan(**params)

    def get_max_margin_transfer(self, **params):
        """
        Query max transfer-out amount

        :param asset: required
        :param recvWindow: the number of milliseconds the request is valid for

        :returns: API response
        """
        return self.binance_call.get_max_margin_transfer(**params)

    def margin_stream_get_listen_key(self):
        """
        Start a new margin data stream and return the listen key
        If a stream already exists it should return the same key.
        If the stream becomes invalid a new key is returned.

        Can be used to keep the user stream alive.

        :returns: API response
        """
        return self.binance_call.margin_stream_get_listen_key()

    def margin_stream_keepalive(self, listenKey):
        """
        PING a margin data stream to prevent a time out.

        :param listenKey: required

        :return: API response
        """
        return self.binance_call.margin_stream_keepalive(listenKey)

    def margin_stream_close(self, listenKey):
        """
        Close out a margin data stream.

        :param listenKey: required

        :returns: API response
        """
        return self.binance_call.margin_stream_close(listenKey)
